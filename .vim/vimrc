"
" kuozumijp vimrc
"

syntax on

" よりVimらしく使いたい
set nocompatible

" 最近編集した 50 ファイル内のマークは保存
" レジスタの中身 (それぞれ 1000 行まで) は保存
set viminfo='50,\"1000,:0,n~/.vim/viminfo

" タブバーを常に表示する
set showtabline=2

" ステータスラインを常に表示する 
set laststatus=2

" ステータスラインに文字コードと改行文字を表示する 
set statusline=%<%f\ %m%r%h%w%=%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']['.&ft.']'}\ \ %l,%c%V%8P

" TerminalのHeaderに表示
set title

" Vimの折りたたみ関連
set foldmethod=marker
au FileType perl :set commentstring=#%s

" インデントはスペース
set expandtab
set tabstop=4
set shiftwidth=4

" 行番号を表示させる
set number

" 補完機能を制御する
set wildmode=list:full

" ビープ音を鳴らさない
set visualbell

" 現在のモードを表示する
set showmode

" 改行後に BS を押すと上の行末の 1 文字を消去する
set backspace=2

" インデントを無効にする
set noautoindent

" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set wrapscan

" 大文字小文字を問わない検索
set ignorecase

" 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase

"ルーラを表示
set ruler

"タブを>----で表示
set listchars=tab:>-
set list

" コマンド、検索パターンを100個まで履歴に残す
set history=100

" 起動時のど真ん中に出るメッセージを表示しない
set shortmess+=I

" 全角記号判定
set ambiwidth=double

set hlsearch
set incsearch

" マウスを使う
set mouse=nv
set ttymouse=xterm2

" Ctag周り
set tags=.git/tags;
let g:auto_ctags = 1
let g:auto_ctags_directory_list = ['.git']

" 設定ファイルの場所
if has('win32') || has('win64')
  let $DOTVIM = expand('~/vimfiles')
else
  let $DOTVIM = expand('~/.vim')
endif

"------------------------------------------------------------------------
" Vundle Settings

" Vundle.vimディレクトリ
let s:vundle_dir = expand('$DOTVIM/vundle')
" Vundle.vim 本体
let s:vundle_repo_dir = s:vundle_dir . '/repos/github.com/VundleVim/Vundle.vim'

" Vundle.vim がなければ github から落としてくる
if &runtimepath !~# '/vundle/'
  if !isdirectory(s:vundle_repo_dir)
    execute '!git clone https://github.com/VundleVim/Vundle.vim' s:vundle_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:vundle_repo_dir, ':p')
endif

filetype off

call vundle#rc()

filetype plugin on

"------------------------------------------------------------------------
" dein Settings

let g:rc_dir = $DOTVIM
" deinディレクトリ
let s:dein_dir = expand('$DOTVIM/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " プラグインリストを収めた TOML ファイル
  let s:toml      = g:rc_dir . '/dein.toml'
  let s:lazy_toml = g:rc_dir . '/dein_lazy.toml'

  " TOML を読み込み、キャッシュしておく
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " 設定終了
  call dein#end()
  call dein#save_state()
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
  call dein#install()
endif

"------------------------------------------------------------------------
" highlight
if filereadable(expand('$DOTVIM/vimrc.highlight'))
  source $DOTVIM/vimrc.highlight
endif

"------------------------------------------------------------------------
" Shell
au BufNewFile,BufRead *.sh    :set ft=sh
au BufNewFile,BufRead *rc     :set ft=sh
"------------------------------------------------------------------------
" PHP
au BufNewFile,BufRead *.php   :set ft=php
au BufNewFile,BufRead *.inc   :set ft=php
au BufNewFile,BufRead *.html  :set ft=php
au BufNewFile,BufRead *.ctp   :set ft=php

"------------------------------------------------------------------------
" perl
au BufNewFile,BufRead *.cgi   :set ft=perl
au BufNewFile,BufRead *.pl    :set ft=perl
au BufNewFile,BufRead *.pm    :set ft=perl

"------------------------------------------------------------------------
" sql
au BufNewFile,BufRead *.SQL   :set ft=sql

"------------------------------------------------------------------------
" ruby
au BufNewFile,BufRead *.rb    :set ft=ruby

"------------------------------------------------------------------------
" javascript
au BufNewFile,BufRead *.js    :set ft=javascript
au BufNewFile,BufRead *.ts    :set ft=typescript

"------------------------------------------------------------------------
" html
au BufNewFile,BufRead *.ejs   :set ft=html
au BufNewFile,BufRead *.twig   :set ft=html

"------------------------------------------------------------------------
" css
au BufNewFile,BufRead *.css   :set ft=css

"------------------------------------------------------------------------
" json
au BufNewFile,BufRead *.json   :set ft=json
au BufNewFile,BufRead *.jsonp  :set ft=json

"------------------------------------------------------------------------
" go
au BufNewFile,BufRead *.go   :set ft=go

"------------------------------------------------------------------------
" yaml
au BufNewFile,BufRead *.yaml   :set ft=yaml
au BufNewFile,BufRead *.yml   :set ft=yaml

"------------------------------------------------------------------------
" snippetsEmu 関連 環境変数としてシグネチャを記述
let AUTHOR = 'Keisuke Uozumi'
let TODAY = strftime("%Y/%m/%d")

"------------------------------------------------------------------------
" 辞書関連
autocmd FileType php :set dictionary=$VIMRUNTIME/syntax/php.vim
autocmd FileType perl :set dictionary=$VIMRUNTIME/syntax/perl.vim
autocmd FileType sh :set dictionary=$VIMRUNTIME/syntax/sh.vim
autocmd FileType ruby :set dictionary=$VIMRUNTIME/syntax/ruby.vim
autocmd FileType javascript :set dictionary=$VIMRUNTIME/syntax/javascript.vim
autocmd FileType html :set dictionary=$VIMRUNTIME/syntax/html.vim
autocmd FileType css :set dictionary=$VIMRUNTIME/syntax/css.vim
autocmd FileType json :set dictionary=$VIMRUNTIME/syntax/json.vim
autocmd FileType go :set dictionary=$VIMRUNTIME/syntax/go.vim
autocmd FileType yaml :set dictionary=$VIMRUNTIME/syntax/yaml.vim

"------------------------------------------------------------------------
" 言語設定
autocmd FileType javascript :set tabstop=2
autocmd FileType javascript :set shiftwidth=2

"------------------------------------------------------------------------
" ポップアップメニューのカラーを設定
"highlight Pmenu ctermbg=4
"highlight PmenuSel ctermbg=1
"highlight PMenuSbar ctermbg=4

"------------------------------------------------------------------------
" 括弧、クォートの入力時にカーソルを1個戻す
imap {} {}<Left>
imap [] []<Left>
imap () ()<Left>
imap <> <><Left>
imap '' ''<Left>
imap "" ""<Left>

"------------------------------------------------------------------------
" caw.vim
nmap <C-K> <Plug>(caw:i:toggle)
vmap <C-K> <Plug>(caw:i:toggle)

"------------------------------------------------------------------------
" vimtab関連
if has('mac')
  nnoremap <C-t> :tabnew<Return>
  nnoremap <C-a> :tabedit ./ <Return>
  nnoremap <C-w> :tabclose<Return>
  nnoremap <C-r> gt
  nnoremap <C-e> gT
else
  nnoremap <C-t> :tabnew<Return>
  nnoremap <C-a> :tabedit ./ <Return>
  nnoremap <C-w> :tabclose<Return>
  nnoremap <C-r> gt
  nnoremap <C-Tab> gt
  nnoremap <C-e> gT
  nnoremap <C-S-Tab> gT
endif

"------------------------------------------------------------------------
" 自動改行無し
autocmd FileType perl :set formatoptions-=ro

"------------------------------------------------------------------------
" スペース類をハイライトする
function! HighlightDislikeSpace()
  " 全角スペース
  syntax match DislikeSpace /　/
  " タブ
  syntax match DislikeSpace /\t/
  " 行末のスペース
  syntax match DislikeSpace /\S\@<=\s\+$/
  highlight DislikeSpace cterm=underline ctermfg=1
endfunc
au BufNew,BufRead * call HighlightDislikeSpace()

" これも全角スペース
highlight JpSpace cterm=underline ctermfg=Blue guifg=Blue
au BufRead,BufNew * match JpSpace /　/

"------------------------------------------------------------------------
"",e"でファイルをVIM上で実行する
" ホントは!でできるんだけどファイル形式も自動で見てくれる
function! ShebangExecute()
  let m = matchlist(getline(1), '#!\(.*\)')
  if(len(m) > 2)
    execute '!'. m[1] . ' %'
  else
    execute '!' &ft ' %'
  endif
endfunction
nmap ,e :call ShebangExecute()<CR>

"------------------------------------------------------------------------
" F6で今日の日付を入力する
nmap <F6> <ESC>i<C-R>=strftime("%Y/%m/%d")<CR><CR>

"------------------------------------------------------------------------
" 文字コードの自動認識
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

" 環境ごとの設定は.vimrc.localに置く
if filereadable(expand('$DOTVIM/vimrc.local'))
  source $DOTVIM/vimrc.local
endif
